apiVersion: v1
data:
  application-prod.yaml: "opentracing:\n  jaeger:\n    enabled: true\n    udp-sender:\n      host: jaeger-agent.monitoring-system\n      port: 6831\nvanderlande:\n  kafka:\n    broker-addresses: kafka.production:9092\n    topic: systemevent\n  services:\n    url:\n      adaptoloadingmock: http://wiremock.pocket-sorter.svc.cluster.local/adapto-loading-mock/api\n      stock-broker: http://wiremock.pocket-sorter.svc.cluster.local/stock-broker/api\n      consignment-planner: http://wiremock.pocket-sorter.svc.cluster.local/consignment-planner/api\n  processareas:\n     - processAreaId: '440ddf13-c01e-4119-937e-7371863e5441'\n       processAreaName: 'Decanting'\n       processAreaType: 'Decanting'\n       consumptionAndProvision: 'coupled'\n       processDomainService: 'stock-supplier'\n     - processAreaId: '617918a6-b819-11e8-96f8-529269fb1459'\n       processAreaName: 'Adapto Storage'\n       processAreaType: 'Adapto'\n       consumptionAndProvision: 'decoupled'\n       processDomainService: 'stock-supplier'\n     - processAreaId: '7b92d218-b819-11e8-96f8-529269fb1459'\n       processAreaName: 'GTP1'\n       processAreaType: 'GTP'\n       consumptionAndProvision: 'coupled'\n       processDomainService: 'stock-supplier'\n     - processAreaId: '85feef84-6991-46ac-b31c-48bc992cef9e'\n       processAreaName: 'Palletiser'\n       processAreaType: 'Palletiser'\n       consumptionAndProvision: 'coupled'\n       processDomainService: 'stock-supplier'\n     - processAreaId: '6fa34787-d85c-49ef-826e-6253a8c12646'\n       processAreaName: 'Allocation'\n       processAreaType: 'Allocation'\n       consumptionAndProvision: 'decoupled'\n       processDomainService: 'stock-allocator'\n     - processAreaId: '4e9aa42f-78fb-4b4d-82b8-e98dd3e60b4b'\n       processAreaName: 'Package Finalizer'\n       processAreaType: 'Package Finalizer'\n       consumptionAndProvision: 'decoupled'\n       processDomainService: 'Package Finalizer'\n     - processAreaId: 'ec527f8f-0af9-4117-8af3-2e27c7ec4ffc'\n       processAreaName: 'Clearing'\n       processAreaType: 'Clearing'\n       consumptionAndProvision: 'coupled'\n       processDomainService: 'stock-supplier'\n     \n  dataRetention:\n    cleanerDisabled: false\n    cleanerInterval: 0 0 3 * * *\n    minutesToKeepData: 4320\n    maxRemovePerRun: 1000\n  scheduler:\n    data-cleanup:\n      enabled: true\n      retentionTime: 72\n      cron: 0 0 3 * * *\nserver:\n  servlet:\n    context-path: /stock-supplier\n  ssl:\n    enable:  true\n    key-store-type:  PKCS12\n    trust-store-type: JKS\n    key-store: /etc/x509/keystore/keystore.p12\n    trust-store: file:/etc/x509/keystore/truststore.jks"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: stock-supplier
    app.kubernetes.io/version: 4.1.0-20200708125252.932
    helm.sh/chart: stock-supplier-4.1.0-20200708125252.932
    release: stock-supplier
  name: stock-supplier
  namespace: production
---
apiVersion: v1
data:
  application.yaml: |-
    spring:
      profile: prod
      kafka:
        bootstrap-servers: kafka.production:9092
    opentracing:
      jaeger:
        enabled: false
    vanderlande:
       scheduler:
         event-publisher:
           enabled: true
           resignTime: 2
           cron: 0 0 3 * * *
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: lost-items-publisher
    app.kubernetes.io/version: 1.0.0-20200326092256.5
    helm.sh/chart: lost-items-publisher-1.0.0-20200326092256.5
  name: stock-supplier-lost-items-publisher
  namespace: production
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  labels:
    app: stock-supplier-postgres
    chart: postgresql-0.15.1
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-postgres
  namespace: production
---
apiVersion: v1
data:
  application.yaml: |-
    spring:
      kafka:
        bootstrap-servers: kafka.production:9092
    opentracing:
      jaeger:
        enabled: true
        udp-sender:
          host: jaeger-agent.monitoring-system
          port: 6831
    vanderlande:
      polling-publisher:
        topic: systemevent
        polling-interval: 100
kind: ConfigMap
metadata:
  labels:
    app: turing-polling-publisher
    chart: turing-polling-publisher-7.8.7
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-turing-polling-publisher
  namespace: production
---
apiVersion: v1
data:
  postgres-password: c3RvY2tzdXBwbGllcg==
kind: Secret
metadata:
  labels:
    app: stock-supplier-postgres
    chart: postgresql-0.15.1
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-postgres
  namespace: production
type: Opaque
---
apiVersion: v1
data:
  password: U1RPQ0tTVVBQTElFUg==
  username: U1RPQ0tTVVBQTElFUg==
kind: Secret
metadata:
  name: stock-supplier-db-auth
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: stock-supplier-postgres
    chart: postgresql-0.15.1
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-postgres
  namespace: production
spec:
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: stock-supplier-postgres
    release: stock-supplier
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: lost-items-publisher
    app.kubernetes.io/version: 1.0.0-20200326092256.5
    helm.sh/chart: lost-items-publisher-1.0.0-20200326092256.5
  name: stock-supplier-lost-items-publisher
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/name: lost-items-publisher
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: turing-polling-publisher
    app.kubernetes.io/version: 7.8.7
    helm.sh/chart: turing-polling-publisher-7.8.7
  name: stock-supplier-turing-polling-publisher
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/name: turing-polling-publisher
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    checksum/config: c3335b25ea6488e6e6191c1e6e83c4244030a5fe35a1cbf50f756d384a69c203
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: stock-supplier
    app.kubernetes.io/version: 4.1.0-20200708125252.932
    helm.sh/chart: stock-supplier-4.1.0-20200708125252.932
    release: stock-supplier
  name: stock-supplier
  namespace: production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stock-supplier
      release: stock-supplier
  template:
    metadata:
      labels:
        app: stock-supplier
        release: stock-supplier
    spec:
      containers:
      - env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: stock-supplier-db-auth
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: stock-supplier-db-auth
        - name: DB_DRIVER
          value: org.postgresql.Driver
        - name: DB_URL
          value: jdbc:postgresql://stock-supplier-postgres:5432/stocksupplier
        - name: DB_DIALECT
          value: org.hibernate.dialect.PostgreSQLDialect
        image: vicentral.azurecr.io/vanderlande/wpp/fm_ssu/stock-supplier:${#triggerResolvedArtifactByType('docker/image')['version']}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /management/health
            port: health
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: stock-supplier
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8079
          name: health
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /management/health
            port: health
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        volumeMounts:
        - mountPath: /etc/secret
          name: secret
          readOnly: true
        - mountPath: /etc/config
          name: application-config
          readOnly: true
        - mountPath: /etc/x509/password
          name: password
        - mountPath: /etc/x509/keystore
          name: keystore
        - mountPath: /etc/x509/ca
          name: ca
      imagePullSecrets:
      - name: default-docker-registry
      initContainers:
      - command:
        - sh
        - -c
        - |
          export RANDFILE=/tmp/.rnd

          # Create keystore passwords
          openssl rand -base64 32 > /etc/x509/password/keystore
          openssl rand -base64 32 > /etc/x509/password/truststore

          chown 1000 /etc/x509/password/*
          chmod 0600 /etc/x509/password/*

          # Create pkcs12 keystore
          openssl pkcs12 -export -in /etc/x509/cert/tls.crt -inkey /etc/x509/cert/tls.key \
                  -out /etc/x509/keystore/keystore.p12 -name server \
                  -CAfile /etc/x509/ca/ca.crt -caname root \
                  -password file:/etc/x509/password/keystore

          # Create pkcs12 truststore
          openssl pkcs12 -export -nokeys -in /etc/x509/ca/ca.crt \
                  -out /etc/x509/keystore/truststore.p12 \
                  -password file:/etc/x509/password/truststore

          chown 1000 /etc/x509/keystore/*
          chmod 0600 /etc/x509/keystore/*

          # Create postgresql client certificates
          cp /etc/x509/ca/ca.crt /etc/x509/postgresql/ca.crt
          cp /etc/x509/cert/tls.crt /etc/x509/postgresql/client.crt
          openssl pkcs8 -topk8 -inform PEM -outform DER -in /etc/x509/cert/tls.key -out /etc/x509/postgresql/client.key -nocrypt

          chown 1000 /etc/x509/postgresql/*
          chmod 0600 /etc/x509/postgresql/*
        image: frapsoft/openssl
        imagePullPolicy: IfNotPresent
        name: import-cert
        volumeMounts:
        - mountPath: /etc/x509/password
          name: password
        - mountPath: /etc/x509/keystore
          name: keystore
        - mountPath: /etc/x509/postgresql
          name: postgresql
        - mountPath: /etc/x509/cert
          name: cert
        - mountPath: /etc/x509/ca
          name: ca
      - command:
        - sh
        - -c
        - |2

          # Copy cacerts
          cp $JAVA_HOME/lib/security/cacerts /etc/x509/keystore/truststore.jks

          # Change cacerts password
          keytool -storepasswd -keystore /etc/x509/keystore/truststore.jks -storepass changeit -new $(cat /etc/x509/password/truststore)

          echo "Import internal ca to truststore.jks"
          # Add cluster CA
          keytool -importcert -keystore /etc/x509/keystore/truststore.jks -storepass \
                  $(cat /etc/x509/password/truststore) -file /etc/x509/ca/ca.crt \
                  -noprompt -storetype JKS -alias internal-ca
        image: openjdk:11.0-jre-slim
        imagePullPolicy: IfNotPresent
        name: import-cert-keytool
        volumeMounts:
        - mountPath: /etc/x509/password
          name: password
        - mountPath: /etc/x509/keystore
          name: keystore
        - mountPath: /etc/x509/cert
          name: cert
        - mountPath: /etc/x509/ca
          name: ca
      volumes:
      - name: secret
        secret:
          secretName: stock-supplier-keycloak
      - configMap:
          name: stock-supplier
        name: application-config
      - name: cert
        secret:
          secretName: stock-supplier-cert
      - name: ca
        secret:
          secretName: ca-cert
      - emptyDir: {}
        name: password
      - emptyDir: {}
        name: keystore
      - emptyDir: {}
        name: postgresql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: lost-items-publisher
    app.kubernetes.io/version: 1.0.0-20200326092256.5
    helm.sh/chart: lost-items-publisher-1.0.0-20200326092256.5
  name: stock-supplier-lost-items-publisher
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: stock-supplier
      app.kubernetes.io/name: lost-items-publisher
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: stock-supplier
        app.kubernetes.io/name: lost-items-publisher
    spec:
      containers:
      - env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: stock-supplier-db-auth
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: stock-supplier-db-auth
        - name: DB_DRIVER
          value: org.postgresql.Driver
        - name: DB_URL
          value: jdbc:postgresql://stock-supplier-postgres:5432/stocksupplier
        image: vicentral.azurecr.io/vanderlande/wpp/fm_ssu/lost-items-publisher:1.0.0-20200326092256.5
        imagePullPolicy: IfNotPresent
        name: lost-items-publisher
        resources: {}
        volumeMounts:
        - mountPath: /etc/config
          name: application-config
          readOnly: true
      imagePullSecrets:
      - name: default-docker-registry
      volumes:
      - configMap:
          name: stock-supplier-lost-items-publisher
        name: application-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: turing-polling-publisher
    app.kubernetes.io/version: 7.8.7
    helm.sh/chart: turing-polling-publisher-7.8.7
  name: stock-supplier-turing-polling-publisher
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: stock-supplier
      app.kubernetes.io/name: turing-polling-publisher
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: stock-supplier
        app.kubernetes.io/name: turing-polling-publisher
    spec:
      containers:
      - env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: stock-supplier-db-auth
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              key: password
              name: stock-supplier-db-auth
        - name: DB_DRIVER
          value: org.postgresql.Driver
        - name: DB_URL
          value: jdbc:postgresql://stock-supplier-postgres:5432/stocksupplier
        image: vicentral.azurecr.io/vanderlande/wpp/turing-polling-publisher:7.8.7
        imagePullPolicy: IfNotPresent
        name: turing-polling-publisher
        resources: {}
        volumeMounts:
        - mountPath: /etc/config
          name: application-config
          readOnly: true
      imagePullSecrets:
      - name: default-docker-registry
      volumes:
      - configMap:
          name: stock-supplier-turing-polling-publisher
        name: application-config
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: stock-supplier-postgres
    chart: postgresql-0.15.1
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-postgres
  namespace: production
spec:
  selector:
    matchLabels:
      app: stock-supplier-postgres
      release: stock-supplier
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: stock-supplier-postgres
        release: stock-supplier
    spec:
      containers:
      - args: null
        env:
        - name: POSTGRES_USER
          value: stocksupplier
        - name: PGUSER
          value: stocksupplier
        - name: POSTGRES_DB
          value: stocksupplier
        - name: POSTGRES_INITDB_ARGS
          value: ""
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: stock-supplier-postgres
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        image: postgres:9.6.2
        imagePullPolicy: ""
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          failureThreshold: 6
          initialDelaySeconds: 60
          timeoutSeconds: 5
        name: stock-supplier-postgres
        ports:
        - containerPort: 5432
          name: postgresql
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data/pgdata
          name: data
          subPath: postgresql-db
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: stock-supplier-postgres
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  app.kubernetes.io/instance: stock-supplier
  app.kubernetes.io/managed-by: Tiller
  app.kubernetes.io/name: stock-supplier
  app.kubernetes.io/version: 4.1.0-20200708125252.932
  helm.sh/chart: stock-supplier-4.1.0-20200708125252.932
  labels: null
  name: stock-supplier
  namespace: production
  release: stock-supplier
spec:
  commonName: stock-supplier
  dnsNames:
  - stock-supplier
  - stock-supplier.production
  - stock-supplier.production.svc.cluster.local
  issuerRef:
    kind: ClusterIssuer
    name: ca
  secretName: stock-supplier-cert
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/proxy-buffer-size: 16k
  labels:
    app.kubernetes.io/instance: stock-supplier
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: stock-supplier
    app.kubernetes.io/version: 4.1.0-20200708125252.932
    helm.sh/chart: stock-supplier-4.1.0-20200708125252.932
    release: stock-supplier
  name: stock-supplier
  namespace: production
spec:
  rules:
  - host: team2-vanderlande.westeurope.cloudapp.azure.com
    http:
      paths:
      - backend:
          serviceName: stock-supplier
          servicePort: http
        path: /stock-supplier
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: stock-supplier-postgres
    chart: postgresql-0.15.1
    heritage: Tiller
    release: stock-supplier
  name: stock-supplier-postgres
  namespace: production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
